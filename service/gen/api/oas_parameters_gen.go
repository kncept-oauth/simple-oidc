// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AuthorizeGetParams is parameters of GET /authorize operation.
type AuthorizeGetParams struct {
	ResponseType string
	ClientID     string
	Scope        string
	RedirectURI  string
	State        OptString
	Nonce        OptString
}

func unpackAuthorizeGetParams(packed middleware.Parameters) (params AuthorizeGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "response_type",
			In:   "query",
		}
		params.ResponseType = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "client_id",
			In:   "query",
		}
		params.ClientID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "scope",
			In:   "query",
		}
		params.Scope = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "redirect_uri",
			In:   "query",
		}
		params.RedirectURI = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.State = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "nonce",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Nonce = v.(OptString)
		}
	}
	return params
}

func decodeAuthorizeGetParams(args [0]string, argsEscaped bool, r *http.Request) (params AuthorizeGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: response_type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "response_type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ResponseType = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "response_type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: client_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "client_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "client_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: scope.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "scope",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Scope = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "scope",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: redirect_uri.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "redirect_uri",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.RedirectURI = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "redirect_uri",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: nonce.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "nonce",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNonceVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNonceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Nonce.SetTo(paramsDotNonceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "nonce",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
