// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	AuthorizationHandler
	WellKnownHandler
	// NewError creates *ErrRespStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrRespStatusCode
}

// AuthorizationHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Authorization
type AuthorizationHandler interface {
	// AuthorizeGet implements GET /authorize operation.
	//
	// Authorize Endpoint.
	//
	// GET /authorize
	AuthorizeGet(ctx context.Context, params AuthorizeGetParams) (AuthorizeGetRes, error)
	// TokenPost implements POST /token operation.
	//
	// Token Exchange Endpoint.
	//
	// POST /token
	TokenPost(ctx context.Context, req TokenPostReq) (TokenPostRes, error)
}

// WellKnownHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: WellKnown
type WellKnownHandler interface {
	// Jwks implements jwks operation.
	//
	// Json Web Keyset.
	//
	// GET /.well-known/jwks.json
	Jwks(ctx context.Context) (*JWKSetResponse, error)
	// OpenIdConfiguration implements openIdConfiguration operation.
	//
	// (Partial) OIDC config.
	//
	// GET /.well-known/openid-configuration
	OpenIdConfiguration(ctx context.Context) (*OpenIDProviderMetadataResponse, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
